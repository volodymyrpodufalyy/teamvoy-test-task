{"version":3,"sources":["utils/generateColor.js","core/axios.js","utils/api/pokemon.js","components/PokemonCard/index.jsx","components/PokemonInfo/index.jsx","components/PokemonsList/index.jsx","components/Spin/index.jsx","App.js","index.js"],"names":["colors","fire","grass","electric","water","ground","rock","fairy","poison","bug","dragon","psychic","flying","fighting","normal","pokemonColorTypes","Object","keys","generateColor","pokemonTypes","arr1","arr2","match","i","indexOf","push","values","diff","axios","defaults","baseURL","window","location","origin","pokemonApi","getAll","pageSize","get","getPokemonData","url","filterByType","type","getTypes","PokemonCard","card","convertToUpperCase","onCardClick","renderImage","renderTypes","useState","pokemonData","setPokemonData","useEffect","then","data","pokemonColors","onClick","className","src","id","alt","name","types","map","item","style","backgroundColor","slot","PokemonInfo","onClose","pokemonInfo","setPokemonInfo","length","stats","base_stat","stat","weight","moves","PokemonsList","pokemons","setPokemons","filtered","setPageSize","activePokemon","setActivePokemon","opened","setOpened","word","toUpperCase","slice","console","log","URL","pokemonCallInfo","results","Spin","App","setFiltered","setTypes","selectRef","useRef","htmlFor","onChange","current","value","pokemon","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09a41d75.chunk.js","sourcesContent":["const colors = {\r\n\tfire: '#FDDFDF',\r\n\tgrass: '#DEFDE0',\r\n\telectric: '#FCF7DE',\r\n\twater: '#DEF3FD',\r\n\tground: '#f4e7da',\r\n\trock: '#d5d5d4',\r\n\tfairy: '#fceaff',\r\n\tpoison: '#98d7a5',\r\n\tbug: '#f8d5a3',\r\n\tdragon: '#97b3e6',\r\n\tpsychic: '#eaeda1',\r\n\tflying: '#F5F5F5',\r\n\tfighting: '#E6E0D4',\r\n\tnormal: '#F5F5F5'\r\n};\r\n\r\nconst pokemonColorTypes = Object.keys(colors);\r\n\r\nconst generateColor = (pokemonTypes) => {\r\n    const diff = (arr1, arr2) => {\r\n        const match = []\r\n        for(const i in arr1) {   \r\n            if(arr2.indexOf(arr1[i]) > -1){\r\n                match.push(Object.values(colors)[i])\r\n            }\r\n        }\r\n        return match;\r\n    }\r\n    const matchedColors = diff(pokemonColorTypes, pokemonTypes);\r\n    return matchedColors;\r\n    \r\n}\r\n\r\nexport default generateColor;\r\n","\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL = window.location.origin;\r\n\r\nwindow.axios = axios;\r\n\r\nexport default axios;","import { axios } from \"core\";\r\n\r\nconst pokemonApi = {\r\n    getAll: (pageSize) => axios.get(`https://pokeapi.co/api/v2/pokemon?limit=${pageSize}&offset=0`),\r\n    getPokemonData: (url) => axios.get(`${url}`),\r\n    filterByType: (type) => axios.get(`https://pokeapi.co/api/v2/type/${type}`),\r\n    getTypes: () => axios.get(`https://pokeapi.co/api/v2/type`),\r\n};\r\n  \r\nexport default pokemonApi;","import \"./PokemonCard.scss\"\r\nimport React, { useEffect, useState } from 'react';\r\nimport generateColor from \"../../utils/generateColor\";\r\nimport { pokemonApi } from \"utils/api\";\r\nimport { Spin } from \"components\"\r\n\r\n\r\nconst PokemonCard = ({ card, convertToUpperCase, onCardClick, renderImage, renderTypes }) => {\r\n\r\n    const [pokemonData, setPokemonData] = useState()\r\n\r\n    useEffect(() => {\r\n        pokemonApi.getPokemonData(card.url).then(({data}) => setPokemonData(data));\r\n    }, []);\r\n\r\n    if(!pokemonData) {\r\n        return <Spin/>;\r\n    }\r\n\r\n\r\n    const pokemonColors = generateColor(renderTypes(pokemonData));\r\n     return (\r\n        <div onClick={() => onCardClick(card)} className=\"pokemons__list-card\">\r\n            <div className=\"pokemons__list-card-img\">\r\n                <img src={renderImage(pokemonData.id)} alt=\"Pokemon without images\"></img>\r\n            </div>\r\n            <div className=\"pokemons__list-card-info\">\r\n                <h3  className=\"pokemons__list-card-info-name\" >\r\n                    {convertToUpperCase(card.name)}\r\n                </h3>\r\n                <div className=\"pokemons__list-card-info-types\" >\r\n                    {pokemonData.types.map((item, i) => {\r\n                        return (<p style={{ backgroundColor: `${pokemonColors[i]}` }} \r\n                        key={item.slot} >\r\n                            {convertToUpperCase(item.type.name)}\r\n                        </p>);\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>        \r\n    );\r\n}\r\n\r\nexport default PokemonCard;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { pokemonApi } from \"utils/api\";\r\nimport \"./PokemonInfo.scss\";\r\nimport { Spin } from \"components\"\r\n\r\nconst PokemonInfo = ({ card, renderImage, convertToUpperCase, onClose }) => {\r\n    const [pokemonInfo, setPokemonInfo] = useState();\r\n\r\n    const generateIndex = (id) => {\r\n        if(id >= 10 && id < 100) return `#0${id}`\r\n        if(id >= 100) {\r\n            return `#${id}`\r\n        }\r\n        return `#00${id}`\r\n    }\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n        pokemonApi.getPokemonData(card.url).then(({data}) => setPokemonInfo(data));\r\n    }, [renderImage]);\r\n\r\n    if(!pokemonInfo) {\r\n        return <Spin/>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"pokemon__info\" >\r\n            <div className=\"pokemon__info-img\">\r\n                <button onClick={onClose} >X</button>\r\n                <img src={renderImage(pokemonInfo.id)} alt=\"pokemon\"></img>\r\n            </div>\r\n            <div className=\"pokemons__info-content\">\r\n                <h3 className=\"pokemon__info-content-name\" >{convertToUpperCase(card.name) + generateIndex(pokemonInfo.id)}</h3>\r\n                <div className=\"pokemons__info-content-table\" >\r\n                    <table className=\"pokemon__table\" >\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Types</th>\r\n                                <th>Attack</th>\r\n                                <th>Defense</th>\r\n                                <th>HP</th>\r\n                                <th>SP Attack</th>\r\n                                <th>SP Defense</th>\r\n                                <th>Speed</th>\r\n                                <th>Weight</th>\r\n                                <th>Total Moves</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>{pokemonInfo.types.map((item, i) => {\r\n                                    if (pokemonInfo.types.length === i + 1 && pokemonInfo.types.length !== 1)\r\n                                    return <span key={item.slot} > {', ' + convertToUpperCase(item.type.name)} </span>\r\n                                    return <span key={item.slot} > {convertToUpperCase(item.type.name)} </span>\r\n                                })}</td>\r\n                                {pokemonInfo.stats.map(item => (\r\n                                    <td key={item.stat.url} >{item.base_stat}</td>\r\n                                ))}\r\n                                <td>{pokemonInfo.weight}</td>\r\n                                <td>{pokemonInfo.moves.length}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokemonInfo;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Spin, PokemonInfo, PokemonCard } from \"components\";\r\nimport { pokemonApi } from \"utils/api\";\r\nimport \"./PokemonsList.scss\"\r\n\r\nconst PokemonsList = ({ pokemons, setPokemons, filtered, pageSize, setPageSize }) => {\r\n    const [activePokemon, setActivePokemon] = useState(); \r\n    const [opened, setOpened] = useState(false);\r\n\r\n    const convertToUpperCase = (word) => {\r\n        return word[0].toUpperCase() + word.slice(1);\r\n    }\r\n\r\n    console.log(opened);\r\n\r\n \r\n\r\n    const renderImage = (id) => {\r\n        return new URL(`https://pokeres.bastionbot.org/images/pokemon/${id}.png`);\r\n    }\r\n\r\n    const renderTypes = (data) => {\r\n        return data.types.map(item => item.type.name);\r\n    }\r\n\r\n    const onCardClick = (pokemonCallInfo) => {\r\n        setActivePokemon(pokemonCallInfo);\r\n        setOpened(true);\r\n    }\r\n\r\n    const onClose = () => {\r\n        setOpened(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        pokemonApi.getAll(pageSize).then(({data}) => setPokemons(data.results));    \r\n    }, [pageSize]);\r\n\r\n    const onPageLoad = () => {\r\n        setPageSize(pageSize + 12);\r\n    }\r\n\r\n    if(!pokemons) {\r\n        return <Spin/>\r\n    }\r\n\r\n    return (\r\n        <section className=\"pokemons-content\" >\r\n            <div className=\"pokemons\">\r\n                <ul className=\"pokemons__list\" >\r\n                {pokemons.map((pokemonInfo) => (\r\n                    <li key={pokemonInfo.url}>\r\n                        <PokemonCard\r\n                        renderTypes={renderTypes}\r\n                        renderImage={renderImage}\r\n                        onCardClick={onCardClick}\r\n                        convertToUpperCase={convertToUpperCase} \r\n                        card={pokemonInfo} \r\n                        />\r\n                    </li>\r\n                    ))}\r\n                </ul>\r\n                {!filtered && (<button onClick={onPageLoad} className=\"pokemons__load\">\r\n                    <h1>Load More</h1>\r\n                </button>)}\r\n            </div>          \r\n            {opened && \r\n                <PokemonInfo \r\n                onClose={onClose}\r\n                renderTypes={renderTypes}\r\n                renderImage={renderImage}\r\n                convertToUpperCase={convertToUpperCase} \r\n                card={activePokemon} \r\n                />}\r\n        </section>\r\n           \r\n    )\r\n}\r\n\r\nexport default PokemonsList;\r\n\r\n","import React from 'react';\r\nimport \"./Spin.scss\";\r\n\r\nconst Spin = () => {\r\n    return (\r\n       <div className=\"spinner\">\r\n            <div className=\"lds-ring\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n       </div>\r\n    )\r\n}\r\n\r\nexport default Spin\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { PokemonsList } from \"components\"\r\nimport { pokemonApi } from \"utils/api\";\r\n\r\nconst App = () => {\r\n  const [pokemons, setPokemons] = useState([]);\r\n  const [filtered, setFiltered] = useState(false);\r\n  const [pageSize, setPageSize] = useState(24);\r\n  const [types, setTypes] = useState();\r\n  const selectRef = useRef();\r\n  useEffect(() => {\r\n    pokemonApi.getTypes().then(({data}) => setTypes(data.results));\r\n  }, [])\r\n\r\n  const filterByType = () => {\r\n    if(selectRef.current.value !== 'All'){\r\n      pokemonApi.filterByType(selectRef.current.value).then(({data}) => setPokemons(data.pokemon.map(i => i.pokemon)));\r\n      setFiltered(true);\r\n    } \r\n    else {\r\n      pokemonApi.getAll(pageSize).then(({data}) => setPokemons(data.results)); \r\n      setFiltered(false)   \r\n    }\r\n  };\r\n\r\n  if(!types) return null;\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <header>\r\n        <div className=\"pokedex-title\">\r\n          <h1 >Pokedex</h1>\r\n        </div>\r\n        <div className=\"filter\"> \r\n        <label htmlFor=\"type-select\">Choose a type:</label>\r\n        <select onChange={filterByType} ref={selectRef} name=\"types\" id=\"type-select\">\r\n            <option value=\"All\">All</option>\r\n            {types.map(item => (\r\n              <option \r\n              key={item.url} \r\n              value={item.name}\r\n              >{item.name}\r\n              </option>\r\n            ))}\r\n        </select>\r\n        </div>\r\n      </header>\r\n      <main>\r\n        <PokemonsList pageSize={pageSize} setPageSize={setPageSize} filtered={filtered} pokemons={pokemons} setPokemons={setPokemons} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}